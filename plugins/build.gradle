/* Copyright 2021-2022, Seqera Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import io.nextflow.gradle.tasks.GithubRepositoryPublisher
import io.nextflow.gradle.tasks.GithubUploader
import org.apache.commons.codec.digest.DigestUtils

import java.time.OffsetDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "java"
    id "groovy"
    id "io.nextflow.nf-build-plugin" version "1.0.1"
}

ext.github_organization = project.findProperty('github_organization') ?: 'fulcrumgenomics'
ext.github_access_token = project.findProperty('github_access_token') ?: System.getenv('GITHUB_TOKEN')
ext.github_username = project.findProperty('github_username') ?: System.getenv('GITHUB_USERNAME')
ext.github_commit_email = project.findProperty('github_commit_email') ?: System.getenv('GITHUB_COMMIT_EMAIL')

jar.enabled = false

/** Generate a sha512 hash of the given file. */
static String computeSha512(File file) {
    if (!file.exists()) {
        throw new GradleException("Missing file: $file -- cannot compute SHA-512")
    }
    return DigestUtils.sha512Hex(file.bytes)
}

/** The time is now! */
String now() {
    "${OffsetDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME)}"
}

/** All the plugins we intend to compile, test, build, install, and publish. */
List<String> allPlugins() {
    return [new File(rootProject.rootDir, 'plugins/nf-dotenv')] as List<String>
}

/** Get the metadata for this plugin from the MANIFEST file. */
static String metaFromManifest(String meta, File file) {
    def str = file.text
    def regex = ~/(?m)^$meta:\s*([\w-\.<>=]+)$/
    def m = regex.matcher(str)
    if (m.find()) {
        def ver = m.group(1)
        return ver
    }
    throw new GradleException("Cannot find '$meta' for plugin: $file")
}

def timestamp = now()

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.nextflow.nf-build-plugin'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    version = metaFromManifest('Plugin-Version', file('src/resources/META-INF/MANIFEST.MF'))

    tasks.withType(Jar).configureEach {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    /** Create the plugin ZIP and JSON metadata files in the plugin `build/libs` directory. */
    tasks.register('makeZip', Jar) {
        into('classes') { with jar }
        into('lib') { from configurations.runtimeClasspath }
        manifest.from file('src/resources/META-INF/MANIFEST.MF')
        archiveExtension = 'zip'
        preserveFileTimestamps = false
        reproducibleFileOrder = true

        doLast {
            final zip = new File("$buildDir/libs/${project.name}-${project.version}.zip")
            final json = new File("$buildDir/libs/${project.name}-${project.version}-meta.json")
            json.text = """\
              {
                "version": "${project.version}",
                "date": "${timestamp}",
                "url": "https://github.com/${github_organization}/${project.name}/releases/download/${project.version}/${project.name}-${project.version}.zip",
                "requires": "${metaFromManifest('Plugin-Requires', file('src/resources/META-INF/MANIFEST.MF'))}",
                "sha512sum": "${computeSha512(zip)}"
              }
            """.stripIndent().trim()
            file("$buildDir/tmp/makeZip").deleteDir()
        }
        outputs.file("$buildDir/libs/${project.name}-${project.version}.zip")
    }

    /** Copy the plugin dependencies into the subproject `build/target/libs` directory. */
    tasks.register('copyPluginLibs', Sync) {
        from configurations.runtimeClasspath
        into 'build/target/libs'
        duplicatesStrategy 'exclude'
    }

    /** Copy the plugin into the project root build/plugins directory. */
    tasks.register('copyPluginZip', Copy) {
        dependsOn makeZip
        from makeZip
        into "$rootProject.buildDir/plugins"
        outputs.file("$rootProject.buildDir/plugins/${project.name}-${project.version}.zip")
        doLast {
            ant.unzip(
                src: "$rootProject.buildDir/plugins/${project.name}-${project.version}.zip",
                dest: "$rootProject.buildDir/plugins/${project.name}-${project.version}"
            )
        }
    }

    /** "Install" the plugin into the project root build/plugins directory. */
    project.parent.tasks.getByName("assemble").dependsOn << copyPluginZip

    tasks.register('uploadPlugin', GithubUploader) {
        dependsOn makeZip
        assets = providers.provider {
            [
                "$buildDir/libs/${project.name}-${project.version}.zip",
                "$buildDir/libs/${project.name}-${project.version}-meta.json"
            ]
        }
        release = providers.provider { project.version }
        repo = providers.provider { project.name }
        owner = github_organization
        userName = github_username
        authToken = github_access_token
        skipExisting = true
    }
}

/** Upload all plugins to the corresponding GitHub repos. */
task upload(dependsOn: [subprojects.uploadPlugin]) { }

/** Copy the plugins required dependencies in the corresponding lib directory. */
classes.dependsOn subprojects.copyPluginLibs

/** Merge and publish the plugins index files. */
task publishIndex( type: GithubRepositoryPublisher ) {
    indexUrl = 'https://github.com/nextflow-io/plugins/main/plugins.json'
    repos = allPlugins()
    owner = github_organization
    githubUser = github_username
    githubEmail = github_commit_email
    githubToken = github_access_token
}
